{"version":3,"sources":["SortAlgorithms/MergeSort.js","components/SortingVisualizer.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","changeAlgo","event","setState","algo","target","value","handleSizeChange","newSize","parseInt","max","min","size","handleDelayChange","delay","state","this","refreshArray","minn","maxx","arr","random","mergeSort","console","log","window","screen","width","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","table","className","map","val","idx","key","getWidth","type","name","onChange","id","step","onClick","start","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.26f50c18.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","import React, { Component } from \"react\";\nimport {\n  ARRAY_ELEMENT_MIN,\n  ARRAY_ELEMENT_MAX,\n  ARRAY_SIZE,\n  ARRAY_SIZE_MAX,\n  PRIMARY_COLOR,\n  SECONDARY_COLOR,\n} from \"../constants\";\nimport { getMergeSortAnimations } from \"../SortAlgorithms/MergeSort\";\nimport \"./SortingVisualizer.css\";\n\nexport default class SortingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: ARRAY_SIZE,\n      array: [],\n      algo: null,\n      delay: 10,\n    };\n  }\n\n  componentDidMount() {\n    this.refreshArray();\n  }\n  refreshArray() {\n    const arr = [];\n    for (let i = 0; i < this.state.size; i++) {\n      arr.push(getRandomInt(ARRAY_ELEMENT_MIN, ARRAY_ELEMENT_MAX));\n    }\n    this.setState({ array: arr });\n  }\n  changeAlgo = (event) => {\n    this.setState({ algo: event.target.value });\n  };\n  start() {\n    switch (this.state.algo) {\n      case \"mergesort\":\n        this.mergeSort();\n        break;\n      case \"bubblesort\":\n        console.log(\"Bubble\");\n        break;\n      default:\n        break;\n    }\n  }\n  handleSizeChange = (event) => {\n    let newSize = parseInt(event.target.value);\n    newSize = Math.max(1, newSize);\n    newSize = Math.min(ARRAY_SIZE_MAX, newSize);\n    this.setState({ size: newSize });\n  };\n  handleDelayChange = (event) => {\n    this.setState({ delay: parseInt(event.target.value) });\n  };\n  getWidth() {\n    let w = Math.floor((window.screen.width * 0.6) / this.state.size);\n    // console.log(window.screen.width, w);\n    return w;\n  }\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"arrayBar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.delay);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.delay);\n      }\n    }\n  }\n  render() {\n    console.table(this.state);\n    const { array } = this.state;\n    return (\n      <>\n        <h4>Sorting Visualizer</h4>\n        <div className=\"barsContainer\">\n          {array.map((val, idx) => {\n            return (\n              <div\n                className=\"arrayBar\"\n                key={idx}\n                style={{\n                  height: `${val}px`,\n                  width: `${this.getWidth()}px`,\n                  backgroundColor: PRIMARY_COLOR,\n                }}\n              ></div>\n            );\n          })}\n        </div>\n        <div className=\"buttonContainer\">\n          <div className=\"settings\">\n            <label>\n              Length:\n              <input\n                type=\"text\"\n                name=\"size\"\n                onChange={this.handleSizeChange}\n                size=\"6\"\n              />\n            </label>\n          </div>\n\n          <div className=\"settings\">\n            <select\n              id=\"lang\"\n              onChange={this.changeAlgo}\n              value={this.state.algo}\n            >\n              <option value=\"\">Select Algorithm</option>\n              <option value=\"mergesort\">Merge Sort</option>\n              <option value=\"bubblesort\">Bubble Sort</option>\n            </select>\n          </div>\n\n          <div className=\"settings\">\n            <label>\n              Delay:\n              <input\n                id=\"delay\"\n                type=\"range\"\n                min=\"1\"\n                max=\"1000\"\n                value={this.state.delay}\n                onChange={this.handleDelayChange}\n                step=\"10\"\n              />\n            </label>\n          </div>\n\n          <div className=\"settings\">\n            <button onClick={() => this.refreshArray()}>Reset</button>\n          </div>\n\n          <div className=\"settings\">\n            <button onClick={() => this.start()}>Start</button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction getRandomInt(minn, maxx) {\n  return Math.floor(Math.random() * (maxx - minn + 1) + minn);\n}\n","export const ARRAY_ELEMENT_MAX = 600;\nexport const ARRAY_ELEMENT_MIN = 5;\nexport const ARRAY_SIZE = 10;\nexport const ARRAY_SIZE_MAX = 200;\nexport const PRIMARY_COLOR = 'orchid';\nexport const SECONDARY_COLOR = 'palegreen';","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './components/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}